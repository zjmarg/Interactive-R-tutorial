a <- filter(starwars,species == c("Human","Droid"))
ggplot(data = a) +
geom_bar(mapping = aes(x=homeworld, fill = species))
a <- filter(starwars,species == c("Human","Droid"))
ggplot(data = a) +
geom_bar(mapping = aes(x=homeworld))
head(starwars,10)
starwars_filtered <- select(head(starwars,10),name, height, homeworld, species)
ggplot(data = starwars_filtered) +
geom_bar(mapping = aes(x = homeworld))
View(starwars)
a <- filter(starwars,species == c("Human","Droid"),species == c("Naboo","Tatooine"))
a
a <- filter(starwars,species == c("Human","Droid"),homeworld == c("Naboo","Tatooine"))
a
a <- filter(starwars,species == c("Human","Droid"))
b<-filter(a,homeworld == c("Naboo","Tatooine"))
b
a <- filter(starwars,species == c("Human","Droid"))
a
b <- filter(a,homeworld == c("Naboo","Tatooine"))
b
b <- filter(a,homeworld == "Naboo"|"Tatooine")
b
a <- filter(starwars,species == c("Human","Droid"))
a
a <- filter(starwars,homeworld == c("Naboo","Tatooine"))
a
a <- filter(starwars,homeworld == c("Tatooine"))
a
a <- filter(starwars,homeworld == c("Tatooine"))
ggplot(data = a) +
geom_bar(mapping = aes(x=homeworld))
library(learnr)
library(dplyr)
knitr::opts_chunk$set(echo = FALSE)
starwars_head <- head(select(starwars,name, height,homeworld,species))
starwars_head
#Now apply the filter verb so that we only look at characters whose homeworld is Tatooine
starwars_tatooine <- filter(starwars_head,homeworld == "Tatooine")
starwars_tatooine
starwars_head <- head(select(starwars,name, height,homeworld,species))
filter(starwars_head,species == "Droid")
head(select(starwars,name, height,homeworld,species))
head(select(starwars,name, height,homeworld,species))
starwars_head
?arrange
arrange(starwars_head,height)
desc(arrange(starwars_head,height))
arrange(desc(starwars_head,height))
?desc
arrange(starwars_head,desc(height))
filter(starwars_head,height < 100)
starwars_head
filter(starwars_head,species == "Human" & height > 100
filter(starwars_head,species == "Human" & height > 100)
filter(starwars_head,species == "Human" & height > 100)
filter(starwars_head,species == "Human" & height > 200)
filter(starwars_head,species == "Human" & height >= 200)
starwars
mutate(starwars_head,height_inch = height / 2.54)
mutate(starwars_head,height = height / 2.54)
knitr::include_graphics("images/cloud1.png")
knitr::include_graphics(images/cloud1.png)
knitr::include_graphics("cloud1.png")
starwars
count(starwars,species)
count(starwars,species,sort = TRUE)
?count
count(starwars,homeworld, sort=TRUE)
View(count(starwars,homeworld, sort=TRUE))
summarize(starwars,min_height = min(height))
?summarize
?min
drop_na(starwars,height)
library(tidyverse)
drop_na(starwars,height)
summarize(starwars_dropna,min_height = min(height))
starwars_dropna <- drop_na(starwars,height)
summarize(starwars_dropna,min_height = min(height))
summarize(starwars_dropna,name,min_height = min(height))
summarize(starwars_dropna,min_height = min(height))
summarize(starwars_dropna,min_height = min(height), max_height = max(height),average_height = mean(height))
arrange(starwars_dropna,desc(height))
View(arrange(starwars_dropna,desc(height)))
library(learnr)
library(tidyverse)
library(gapminder)
knitr::opts_chunk$set(echo = FALSE)
ggplot(gapminder_2007,mapping = aes()) +
geom_point()
gapminder_2007 <- filter(gapminder,year==2007)
ggplot(gapminder_2007,mapping = aes()) +
geom_bar()
```{r bar_1, exercise=TRUE, exercise.setup = "gapminder"}
gapminder
ggplot(gapminder_2007,mapping = aes(x=country)) +
geom_bar()
ggplot(gapminder_2007,mapping = aes(x=continent)) +
geom_bar()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_bar()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_bar()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent)) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,y=count)) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,)) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col() + scale_y_binned()
scale_y_continuous()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col() + scale_y_continuous()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col() + scale_y_discrete()
?labels
?ggplot2::labels
?ggplot2::labels
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col() + scale_y_continuous(scientific = FALSE )
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col() + scale_y_continuous(labels = comma)
#Instead of using geom_point, we can use geom_bar
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col() + scale_y_continuous(labels = scales::comma)
ggplot(gapminder_2007,mapping = aes(x=continent,y=mean(gdpPercap))) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,y=mean(gdpPercap))) +
geom_col() + scale_y_continuous(labels = scales::comma)
ggplot(gapminder_2007,mapping = aes(x=continent,y=lifeExp)) +
geom_col() + scale_y_continuous(labels = scales::comma)
ggplot(gapminder_2007,mapping = aes(x=continent,y=summarize(lifeExp))) +
geom_col() + scale_y_continuous(labels = scales::comma)
ggplot(gapminder_2007,mapping = aes(x=continent,y=summarize(continent,mean_life=mean(lifeExp)))) +
geom_col() + scale_y_continuous(labels = scales::comma)
ggplot(gapminder_2007,mapping = aes(x=continent,y=summarize(continent,mean_life=mean(lifeExp)))) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,lifeExp)) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,y=gdpPercap)) +
geom_col()
ggplot(gapminder_2007,mapping = aes(x=continent,y=pop)) +
geom_col()
#Instead of using geom_point, we can use geom_bar
ggplot(gapminder_2007,mapping = aes(x=continent,y=pop)) +
geom_col() + scale_y_continuous(labels = scales::comma)
#Instead of using geom_point, we can use geom_bar
ggplot(gapminder_2007,mapping = aes()) +
#Here is the geom_col function again
geom_col() +
#You might not understand this next line, so you'll have to trust me.
scale_y_continuous(labels = scales::comma)
ggplot(gapminder_2007,mapping = aes(x = continent, y = pop)) +
#Here is the geom_col function again
geom_col() +
#You might not understand this next line, so you'll have to trust me.
scale_y_continuous(labels = scales::comma)
summarize(starwars_dropna,min_height = min(height), max_height = max(height),average_height = mean(height))
?group_by
starwars_drop
starwars_dropna <- drop_na(starwars,height)
starwars_grouped <- group_by(starwars_drop,homeworld)
drop_na(starwars,height)
starwars_dropna <- drop_na(starwars,height)
summarize(starwars_dropna,min_height = min(height))
starwars_grouped <- group_by(starwars_drop,homeworld)
starwars_grouped <- group_by(starwars_dropna,homeworld)
starwars_grouped
summarize(starwars_grouped, mean_height = mean(height))
starwars_grouped <- group_by(starwars_dropna,species)
summarize(starwars_grouped, mean_height = mean(height))
starwars_grouped <- group_by(filter(starwars_dropna,homeworld =="Naboo",species))
starwars_grouped <- group_by(filter(starwars_dropna,homeworld == "Naboo"),species)
starwars_grouped
starwars_grouped <- group_by(filter(starwars_dropna,homeworld == "Tattooine"),species)
starwars_grouped
#Let's try to remove NA's from the starwars dataset in the height category with the drop_na function
starwars_grouped <- group_by(filter(starwars_dropna,homeworld == "Tatooine"),species)
starwars_grouped
starwars_grouped <- group_by(filter(starwars_dropna,homeworld == "Tatooine"),species)
summarize(starwars_grouped, mean_height = mean(height))
starwars_grouped <- group_by(filter(starwars_dropna,homeworld == "Naboo"),species)
summarize(starwars_grouped, mean_height = mean(height))
starwars_grouped <- group_by(filter(starwars,homeworld == "Naboo"),species)
summarize(starwars_grouped, mean_height = mean(height))
<video autosize=TRUE controls>
<source src="R_webinar_vid.mp4" type="video/mp4">
</video>
video_path  <- "media/"
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
r video_files[1]
video_files[1]
video_path  <- "media/"
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_path
list.files
list.files()
getwd()
images/meme_butterfly.jpg
video_path  <- "weinar_1/media/"
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
list.files()
video_path  <- "webinar_1/media/"
video_files <- list.files(video_path,
pattern = "\\.mp4$",
recursive = TRUE,
all.files = FALSE,
full.names = TRUE)
video_files
video_files[1]
install.packages("whatr")
remotes::install_github("kiernann/whatr")
library(whatr)
remotes::install_github("kiernann/whatr")
library(whatr)
remotes::install_github("tbradley1013/whatRshiny")
play_jeopardy()
library(whatRshiny)
play_jeopardy()
play_jeopardy()
remotes::install_github("kiernann/whatr")
force = TRUE
remotes::install_github("kiernann/whatr")
remotes::install_github("tbradley1013/whatRshiny")
install.packages(c("boot", "brio", "broom", "bslib", "cachem", "callr", "class", "cli", "cluster", "colorspace", "cpp11", "curl", "dplyr", "DT", "ellipsis", "fansi", "formatR", "gargle", "gert", "ggplot2", "gh", "googledrive", "haven", "highr", "hms", "httpuv", "isoband", "jose", "jquerylib", "KernSmooth", "keyring", "knitr", "later", "MASS", "Matrix", "mgcv", "mime", "nnet", "openssl", "pillar", "plotly", "processx", "Rcpp", "remotes", "rlang", "rmarkdown", "rsconnect", "RSQLite", "sass", "shinydashboardPlus", "shinymanager", "spatial", "stringi", "survival", "testthat", "tibble", "tidyselect", "tidyverse", "tinytex", "vctrs", "waiter", "withr", "xfun", "zip"))
install.packages(c("boot", "brio", "broom", "bslib", "cachem", "callr", "class", "cli", "cluster", "colorspace", "cpp11", "curl", "dplyr", "DT", "ellipsis", "fansi", "formatR", "gargle", "gert", "ggplot2", "gh", "googledrive", "haven", "highr", "hms", "httpuv", "isoband", "jose", "jquerylib", "KernSmooth", "keyring", "knitr", "later", "MASS", "Matrix", "mgcv", "mime", "nnet", "openssl", "pillar", "plotly", "processx", "Rcpp", "remotes", "rlang", "rmarkdown", "rsconnect", "RSQLite", "sass", "shinydashboardPlus", "shinymanager", "spatial", "stringi", "survival", "testthat", "tibble", "tidyselect", "tidyverse", "tinytex", "vctrs", "waiter", "withr", "xfun", "zip"))
remotes::install_github("kiernann/whatr")
library(whatr)
remotes::install_github("tbradley1013/whatRshiny")
library(whatRshiny)
play_jeopardy
play_jeopardy()
rm(whatr)
remove.packages(whatr)
remove.packages("whatr")
remove.packages("whatRshiny")
remotes::install_github("kiernann/whatr")
library(whatr)
remotes::install_github("tbradley1013/whatRshiny")
library(whatRshiny)
play_jeopardy()
play_jeopardy()
remove.packages("whatr")
remove.packages(whatr)
remove.packages("whatr")
remove.packages("whatRshiny")
list.packages
install.packages(c("boot", "broom", "cachem", "class", "cluster", "colorspace", "curl", "dplyr", "DT", "ellipsis", "fansi", "formatR", "gargle", "googledrive", "haven", "hms", "httpuv", "jose", "KernSmooth", "keyring", "later", "MASS", "Matrix", "mgcv", "mime", "nnet", "plotly", "processx", "Rcpp", "rlang", "rmarkdown", "rsconnect", "RSQLite", "sass", "shinydashboardPlus", "shinymanager", "spatial", "stringi", "survival", "testthat", "tibble", "tidyverse", "tinytex", "vctrs", "xfun"))
install.packages(c("boot", "broom", "cachem", "class", "cluster", "colorspace", "curl", "dplyr", "DT", "ellipsis", "fansi", "formatR", "gargle", "googledrive", "haven", "hms", "httpuv", "jose", "KernSmooth", "keyring", "later", "MASS", "Matrix", "mgcv", "mime", "nnet", "plotly", "processx", "Rcpp", "rlang", "rmarkdown", "rsconnect", "RSQLite", "sass", "shinydashboardPlus", "shinymanager", "spatial", "stringi", "survival", "testthat", "tibble", "tidyverse", "tinytex", "vctrs", "xfun"))
install.packages(c("boot", "broom", "cachem", "class", "cluster", "colorspace", "curl", "dplyr", "DT", "ellipsis", "fansi", "formatR", "gargle", "googledrive", "haven", "hms", "httpuv", "jose", "KernSmooth", "keyring", "later", "MASS", "Matrix", "mgcv", "mime", "nnet", "plotly", "processx", "Rcpp", "rlang", "rmarkdown", "rsconnect", "RSQLite", "sass", "shinydashboardPlus", "shinymanager", "spatial", "stringi", "survival", "testthat", "tibble", "tidyverse", "tinytex", "vctrs", "xfun"))
install.packages(c("boot", "broom", "cachem", "class", "cluster", "colorspace", "curl", "dplyr", "DT", "ellipsis", "fansi", "formatR", "gargle", "googledrive", "haven", "hms", "httpuv", "jose", "KernSmooth", "keyring", "later", "MASS", "Matrix", "mgcv", "mime", "nnet", "plotly", "processx", "Rcpp", "rlang", "rmarkdown", "rsconnect", "RSQLite", "sass", "shinydashboardPlus", "shinymanager", "spatial", "stringi", "survival", "testthat", "tibble", "tidyverse", "tinytex", "vctrs", "xfun"))
install.packages(c("boot", "broom", "cachem", "class", "cluster", "colorspace", "curl", "dplyr", "DT", "ellipsis", "fansi", "formatR", "gargle", "googledrive", "haven", "hms", "httpuv", "jose", "KernSmooth", "keyring", "later", "MASS", "Matrix", "mgcv", "mime", "nnet", "plotly", "processx", "Rcpp", "rlang", "rmarkdown", "rsconnect", "RSQLite", "sass", "shinydashboardPlus", "shinymanager", "spatial", "stringi", "survival", "testthat", "tibble", "tidyverse", "tinytex", "vctrs", "xfun"))
install.packages("sass", repos=c("http://rstudio.org/_packages",
"http://cran.rstudio.com",dependencies=TRUE))
install.packages("learnr")
install.packages("learnr")
install.packages("tidyverse")
install.packages("gapminder")
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
library(Rcpp)
library(tidyverse)
install.packages(c("cachem", "colorspace", "dplyr", "ellipsis", "fansi", "haven", "httpuv", "later", "Matrix", "mgcv", "mime", "rlang", "stringi", "tibble", "vctrs", "xfun"))
install.packages("ellipsis")
install.packages("httpuv")
install.packages("later")
install.packages("rlang")
install.packages("stringi")
install.packages(c("ellipsis", "httpuv", "later", "mime", "rlang"))
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("ellipsis", dependencies = TRUE)
install.packages("ellipsis", dependencies = TRUE)
install.packages("ellipsis", dependencies = TRUE)
install.packages("vctrs", dependencies = TRUE)
install.packages("vctrs", dependencies = TRUE)
library(learnr)
library(tidyverse)
library(gapminder)
gapminder_2007 <- filter(gapminder,year==2007)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop)) + geom_point(alpha = 0.7)
library(learnr)
library(tidyverse)
library(gapminder)
knitr::opts_chunk$set(echo = FALSE)
```{r ques_ggplot, echo = FALSE}
View(gapminder)
ggplot(filter(gapminder, country == "Afghanistan"),mapping = aes(x=year,y=lifeExp)) + geom_point()
ggplot(filter(gapminder, country == "Russia"),mapping = aes(x=year,y=lifeExp)) + geom_point()
ggplot(filter(gapminder, country == "Albania"),mapping = aes(x=year,y=lifeExp)) + geom_point()
View(gapminder_2007)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop, alpha = 0.7)) +
geom_point()
library(tidyverse)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop, alpha = 0.7)) +
geom_point()
gplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop, alpha = 0.5)) +
geom_point()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop, alpha = 0.1)) +
geom_point()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop, alpha = 0.1)) +
geom_point()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop, alpha = 100)) +
geom_point()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop)) +
geom_point(alpha = 1)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop)) +
geom_point(alpha = 0.1)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp,color = continent,size = pop)) +
geom_point(alpha = 100)
?alpha
between(1:12,7,9)
library(tidyverse)
library(tidyverse)
between(1:12,7,9)
library(gradethis)
install.packages("gradethis")
update.packages(learnr)
update.packages("learnr")
remotes::install_github("rstudio-education/gradethis")
install.packages(c("blob", "broom", "cachem", "cli", "credentials", "gert", "googlesheets4", "haven", "httpuv", "later", "mime", "packrat", "pillar", "pkgKitten", "R6", "readr", "renv", "reprex", "rlang", "rmarkdown", "rsconnect", "RSQLite", "rvest", "shinyauthr", "shinydashboardPlus", "stringdist", "stringi", "survival", "tibble", "tinytex", "utf8", "waiter", "waldo", "xfun", "XML"))
install.packages(c("blob", "broom", "cachem", "cli", "credentials", "gert", "googlesheets4", "haven", "httpuv", "later", "mime", "packrat", "pillar", "pkgKitten", "R6", "readr", "renv", "reprex", "rlang", "rmarkdown", "rsconnect", "RSQLite", "rvest", "shinyauthr", "shinydashboardPlus", "stringdist", "stringi", "survival", "tibble", "tinytex", "utf8", "waiter", "waldo", "xfun", "XML"))
install.packages(c("blob", "broom", "cachem", "cli", "credentials", "gert", "googlesheets4", "haven", "httpuv", "later", "mime", "packrat", "pillar", "pkgKitten", "R6", "readr", "renv", "reprex", "rlang", "rmarkdown", "rsconnect", "RSQLite", "rvest", "shinyauthr", "shinydashboardPlus", "stringdist", "stringi", "survival", "tibble", "tinytex", "utf8", "waiter", "waldo", "xfun", "XML"))
remotes::install_github("rstudio-education/gradethis")
library("exams")
set.seed(403)
exams2html("capitals.Rnw")
set.seed(403)
exams2pdf("capitals.Rnw")
set.seed(403)
exams2html("capitals.Rmd")
set.seed(403)
exams2pdf("capitals.Rmd")
install.packages("exams")
library("exams")
set.seed(403)
exams2html("capitals.Rnw")
set.seed(403)
exams2pdf("capitals.Rnw")
set.seed(403)
exams2html("capitals.Rmd")
set.seed(403)
exams2pdf("capitals.Rmd")
library("exams")
set.seed(1090)
exams2html("Rlogo.Rnw")
set.seed(1090)
exams2pdf("Rlogo.Rnw")
set.seed(1090)
exams2html("Rlogo.Rmd")
set.seed(1090)
exams2pdf("Rlogo.Rmd")
library(learnr)
gradethis::gradethis_setup()
library(tidyverse)
library(gapminder)
knitr::opts_chunk$set(echo = FALSE)
count(starwars)
count(starwars)
count(starwars,species)
count(starwars,homeworld,sort = TRUE)
summarize(starwars,min(height))
count(starwars,height)
count(starwars,height,sort=TRUE)
unique(starwars,height)
unique(starwars)
unique(starwars,height)
unique
?unique
summarize(starwars,height)
starwars(height)
starwars %>%
height
height
starwars.height
starwars[height]
starwars[[height]]
str(starwars)
starwars$height
unique(starwars_height)
unique(starwars$height)
View(starwars)
View(starwars$height)
count(starwars,height,sort=TRUE)
summarize(starwars,min(height,na.rm = TRUE))
max(starwars$height)
max(starwars$height,na.rm=TRUE)
summarize(starwars,max(height,na.rm=TRUE))
starwars_head
rename(starwars,height_cm = height)
library(learnr)
gradethis::gradethis_setup()
library(tidyverse)
library(gapminder)
knitr::opts_chunk$set(echo = FALSE)
two-plus-two-solution
r two-plus-two-solution
```{r two-plus-two-solution}
two-plus-two-solution
```{r two-plus-two-solution}
2 + 2
```
```{r two-plus-two-solution}
```{r two-plus-two-solution}
library(learnr)
gradethis::gradethis_setup()
library(tidyverse)
library(gapminder)
knitr::opts_chunk$set(echo = FALSE)
ggplot(filter(gapminder, country == "Albania"),mapping = aes(x=year,y=lifeExp)) + geom_point()
ggplot(filter(gapminder, country = "Albania"),mapping = aes(x=year,y=lifeExp)) + geom_scatterplot()
ggplot(filter(gapminder, country == "Albania",year ==2007),mapping = aes(x=year,y=lifeExp)) + geom_scatterplot()
ggplot(filter(gapminder, country == "Albania"),mapping = aes(x=year,y=lifeExp)) +
geom_point()
library("swirl")
install.packages("swirl")
library(swirl)
[Datacamp's R courses](https://www.datacamp.com/courses/free-introduction-to-r)
library(swirl)
#Run the following code
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
geom_point() +
scale_y_log()
library(tidyverse)
#Run the following code
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
geom_point() +
scale_y_log()
library(ggplot)
#Run the following code
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
geom_point() +
scale_y_log()
#Run the following code
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
geom_point() +
scale_y_log
gapminder_2007
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
geom_point() +
scale_y_log
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
geom_point() +
scale_x_log()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
geom_point() +
scale_y_log()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
geom_point()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_y_log() +
geom_point()
?scale_y_log()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_y_log10() +
geom_point()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_x_log10() +
geom_point()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_x_log10() +
geom_point()+
geom_smooth()
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_x_log10() +
geom_point()+
geom_smooth(method = ln)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_x_log10() +
geom_point()+
geom_smooth(method = lm)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_x_loge() +
geom_point()+
geom_smooth(method = lm)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_x_log(base=2) +
geom_point()+
geom_smooth(method = lm)
library(scales)
ggplot(gapminder_2007,mapping = aes(x=gdpPercap,y=lifeExp)) +
scale_x_log2() +
geom_point()+
geom_smooth(method = lm)
glimpse(gapminder_2007)
```{r gapminder_12_extra, exercise.setup = "gapminder"}
glimpse(gapminder_2007)
```
glimpse(gapminder_2007)
glimpse(gapminder_2007)
